#!/usr/bin/env bash

####
# usage:
# ./vis path/to/mcapt-log
####

## vars

dlog="${1:-./data/dlog.csv}" # arg[1] or default

xpos=0
ypos=0
init=1

## utils

function green {
    echo -e "\033[0;32m${1}\033[0m"
}

function yellow {
    echo -e "\033[0;33m${1}\033[0m"
}

function red {
  echo -e "\033[0;31m${1}\033[0m"
}

function exit_error {
  echo "$(red "[ERROR] ") ${1}"
  exit 1
}

function require_file {
    if [ ! -f "${1}" ]; then
        exit_error "File '${1}' does not exist"
    fi
}

function require_var {
    if [ -z "${!1+x}" ]; then
        exit_error "Variable '${1}' does not exist"
    fi
    if [ -z "${!1}" ]; then
        exit_error "Variable '${1}' ' is empty"
    fi
    # echo "[OK] ${1}='${!1}'"
}

function parse_int {
    # parses a float into an "integer", applies rounding
    printf "%.0f\n" "${1}"
}

## write

function parse_header_value {
    # parse value for a given key from a line like this: '; display=0, width=1920, height=1080, mousex=860, mousey=950'
    line="${1}"
    key="${2}"

    echo "${line}" | grep -Po "(?:^| |,)${key}=\K[^,]+"
}

function svg_line {
    line="${1}"
    svg="${2}"

    # comment
    if [[ "${line:0:1}" == ";" ]] ; then
        echo "<!-- ${1} -->" >> "${svg}"
        return
    fi

    # update abs xpos ypos by adding REL_X, REL_Y

    x="$(echo ${line} | cut -d',' -f2)"
    y="$(echo ${line} | cut -d',' -f3)"

    x="$(parse_int "${x}")"
    y="$(parse_int "${y}")"

    x1="${xpos}"
    y1="${ypos}"

    x2="$(parse_int "${x}")"
    y2="$(parse_int "${y}")"

    # echo " -> ${xpos},${ypos} ${1},${x1}  ${x2},${y2} "

    # svg

    r="1"
    fill="blue"
    stroke="grey"

    if [ "${init}" -eq "1" ]; then
        r=2
        fill="red" # enhance first point
    fi

    # write single data point
    echo "<circle cx=\"${x2}\" cy=\"${y2}\" r=\"${r}\" fill=\"${fill}\" />" >> "${svg}"

    # write line
    if [ "${init}" -eq "0" ]; then
        echo "<line x1=\"${x1}\" y1=\"${y1}\" x2=\"${x2}\" y2=\"${y2}\" stroke=\"${stroke}\" />" >> "${svg}"
    fi

    # update prev

    xpos="${x2}"
    ypos="${y2}"
    init=0
}

## load

require_file "${dlog}"

svg="$(echo ${dlog/csv/svg})"
echo " * writing to $(yellow "'${svg}'")"

# first line, truncates existing file
echo "<svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">" > "${svg}"

## parse screen values from header

# line no 2

line="$(sed -n '1p' "${dlog}")"

width=$(parse_header_value "${line}" "width")
require_var "width"
width="$(parse_int "${width}")"

height=$(parse_header_value  "${line}" "height")
require_var "height"
height="$(parse_int "${height}")"

mousex=$(parse_header_value  "${line}" "mousex")
require_var "mousex"
mousex="$(parse_int "${mousex}")"

mousey=$(parse_header_value  "${line}" "mousey")
require_var "mousey"
mousey="$(parse_int "${mousey}")"

# draw bg and set start points
fill="lightgrey"
echo "<rect width=\"${width}\" height=\"${height}\" x=\"0\" y=\"0\" fill=\"${fill}\" />" >> "${svg}"

xpos="${mousex}"
ypos="${mousey}"

## process

count=0
while IFS= read -r line
do
    svg_line "${line}" "${svg}"
    count=$((count + 1))
done < "${dlog}"

echo "</svg>" >> "${svg}"
echo " * ${count} lines written into $(yellow "'${svg}'")"
